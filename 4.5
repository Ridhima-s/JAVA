public class IslandCounter {

    // Define the possible directions to move: up, down, left, right
    private static final int[][] DIRECTIONS = {
        {-1, 0}, // Up
        {1, 0}, // Down
        {0, -1}, // Left
        {0, 1} // Right
    };

    // Method to count the number of islands in the 2D matrix
    public static int countIslands(char[][] map) {
        if (map == null || map.length == 0 || map[0].length == 0) {
            return 0;
        }

        int numRows = map.length;
        int numCols = map[0].length;
        int islandCount = 0;

        // Iterate through each cell in the matrix
        for (int row = 0; row < numRows; row++) {
            for (int col = 0; col < numCols; col++) {
                // If we find land ('1'), start DFS to mark the island and increment the count
                if (map[row][col] == '1') {
                    islandCount++;
                    dfs(map, row, col);
                }
            }
        }

        return islandCount;
    }

    // Perform DFS to mark all connected land cells as visited
    private static void dfs(char[][] map, int row, int col) {
        // Mark the current cell as visited by changing it to '0' (water)
        map[row][col] = '0';

        // Iterate through each possible direction
        for (int[] direction : DIRECTIONS) {
            int newRow = row + direction[0];
            int newCol = col + direction[1];

            // Check if the new cell is within bounds and is land
            if (newRow >= 0 && newRow < map.length && newCol >= 0 && newCol < map[0].length && map[newRow][newCol] == '1') {
                // Perform DFS recursively on the adjacent land cell
                dfs(map, newRow, newCol);
            }
        }
    }

    // Main method
    public static void main(String[] args) {
        // Example 2D matrix representing a map with land ('1') and water ('0')
        char[][] map = {
            {'1', '1', '0', '0', '0'},
            {'1', '1', '0', '0', '0'},
            {'0', '0', '1', '0', '0'},
            {'0', '0', '0', '1', '1'}
        };

        // Count the number of islands in the map
        int islandCount = countIslands(map);

        // Display the count of islands
        System.out.println("Number of islands: " + islandCount);
    }
}
